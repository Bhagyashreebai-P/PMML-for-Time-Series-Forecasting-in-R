# Time Series Forecasting With PMML
# Linear Regression Models with First order Autoregressive Errors
# Working Directory
getwd()
setwd("C:/Users/karthiv/Documents")
# Required Packages
if(!require(pacman)){install.packages("pacman");require(pacman);}
#install.packages("pacman")
pacman::p_load(astsa,forecast,zoo,caTools,rpart,arm,RCurl,pmmlTransformations,pmml,XML) 
data=read.csv("C:\\Users\\karthiv\\Desktop\\Data.csv")
data$Day=as.factor(data$Day)
data$Wom=as.factor(data$Wom)

# Spilit Data
train=data[1:floor(length(data[,7])/4*3),7]
test=data[((floor(length(data[,7])/4*3))+1):length(data[,7]),7]

# Linear Model
ts_data=ts(train,frequency=7)
trend1=1:length(ts_data)
day=data[(1:length(train)),2]
wom=as.factor(data[(1:length(train)),3])
regmodel=lm(ts_data~trend1+day+wom)
#Random Forest
library(randomForest)
Rfmodel=randomForest(ts_data~trend1+day+wom,ntree=1000)
#SVM
library(e1071)
SVMmodel=svm(ts_data~trend1+day+wom,probability=TRUE)
#ANN
library(nnet)
ANNmodel=nnet(ts_data~trend1+day+wom,size=12,maxit=10000,linout=T,decay=0.01)

#AR(1)
ar1=arima(residuals(regmodel), order = c(1,0,0), include.mean = FALSE)  
sarima (residuals(regmodel), 1,0,0, no.constant = T)

# Create matrix with data and lag 1 of data as elements
xl = ts.intersect(ts_data, lag(ts_data,1)) 

# Create variable for adjustment regression
xnew=xl[,1] - coefficients(ar1)*xl[,2]
length(xnew)
length(day)
# Adjustment regression
trend2=1:length(xnew)

day1=as.factor(day[-1])
wom1=as.factor(wom[-1])
adjustreg = lm(xnew~trend2+day1+wom1) 
summary(regmodel)
summary(adjustreg)

# R-squared
r1=summary(regmodel)$r.squared
r2=summary(adjustreg)$r.squared
Rsquared=data.frame(r1,r2);colnames(Rsquared)=c("regmodel","adjustreg")
Rsquared

# Prediction
monthweeks=function(x) { UseMethod("monthweeks");}
monthweeks.Date=function(x) { ceiling(as.numeric(format(x,"%d"))/7);}
monthweeks.POSIXlt=function(x) {ceiling(as.numeric(format(x,"%d"))/7);}
monthweeks.character=function(x) {ceiling(as.numeric(format(as.Date(x),"%d"))/7);}
No_ahead=length(test)
x=cbind.data.frame(data[(1:length(train)),1]);st=(x[(nrow(x)),]);v=as.Date((st), format='%d-%B-%y');Date_2=cbind.data.frame(seq(as.Date(v+1),as.Date(v+No_ahead),by=1));colnames(Date_2)="Date";
f13=as.factor(weekdays(as.Date(Date_2$Date,'%Y-%m-%d')));f23=as.factor(monthweeks(Date_2$Date))
fl3=cbind.data.frame(as.factor(weekdays(as.Date(Date_2$Date,'%Y-%m-%d'))));colnames(fl3)="Day";fk3=cbind.data.frame(as.factor(monthweeks(Date_2$Date)));colnames(fk3)="WOM";
trend_fut=((nrow(x)+1):length(data[,1]))
new=data.frame(trend1=trend_fut,day=f13,wom=f23)
new1=data.frame(trend2=trend_fut,day1=f13,wom1=f23)
#RMSE for reg
fcreg=predict(regmodel,new)
Predict_data=data.frame(Date_2,f13,test,fcreg)
RMSE = function(o, p){sqrt(mean((o - p)^2))}
rmse_reg=RMSE(Predict_data[,4],Predict_data[,3])
rmse_reg

fcadjreg=predict(adjustreg,new1)
Predict_data4=data.frame(Date_2,f13,test,fcadjreg)
RMSE = function(o, p){sqrt(mean((o - p)^2))}
rmse_adjreg=RMSE(Predict_data4[,4],Predict_data4[,3])
rmse_adjreg

# RMSE for random forest
fcrf=predict(Rfmodel,new)
Predict_data5=data.frame(Date_2,f13,test,fcrf)
RMSE = function(o, p){sqrt(mean((o - p)^2))}
rmse_rf=RMSE(Predict_data5[,4],Predict_data5[,3])
rmse_rf
# RMSE for svm
fcsvm=predict(SVMmodel,new)
Predict_data1=data.frame(Date_2,f13,test,fcsvm)
RMSE = function(o, p){sqrt(mean((o - p)^2))}
rmse_svm=RMSE(Predict_data1[,4],Predict_data1[,3])
rmse_svm
# RMSE for ANN
fcann=predict(ANNmodel,new)
Predict_data2=data.frame(Date_2,f13,test,fcann)
RMSE = function(o, p){sqrt(mean((o - p)^2))}
rmse_ANN=RMSE(Predict_data2[,4],Predict_data2[,3])
rmse_ANN
RMSE=data.frame(rmse_reg,rmse_adjreg,rmse_rf,rmse_svm,rmse_ANN)
colnames(RMSE)=c("regmodel","adjustreg","Rfmodel","SVMmodel","ANNmodel")
model_names=names(RMSE)
best_model=model_names[match(c(min(RMSE)),RMSE)]


## export as pmml
export_xml=saveXML(pmml(regmodel, model.name = paste(best_model), app.name = "RR/PMML", dataset = data), file=paste(best_model,".xml"))

# Prediction
predictPMMLModel=function(dataset,transformTargetAttribute,modelURL,applServerURL)
{
  require(XML)
  require(RCurl)
  header <- paste(colnames(dataset), collapse=",") # extract header
  # transformation to characters is necessary to avoid some “bad surprise” 
  # from R's handling of factor attributes
  datasetTransf <- data.frame(lapply(dataset, as.character), stringsAsFactors=FALSE)
  dataString <- paste(header,"|", paste(do.call("rbind",by(datasetTransf, 1:nrow(datasetTransf), function(row){paste(row, collapse=",")
  }, simplify = FALSE)), collapse ="|"), "|", sep = "")
  # create xml document
  xmlHeader <- xmlPINode(sys = 'xml', value = 'version="1.0" encoding="UTF-8"')
  xmlRequest <- xmlNode("scoring_request", 
                        xmlNode("pmml_url", modelURL), 
                        xmlNode("model_name"),
                        xmlNode("csv_input_rows",xmlCDataNode(dataString)))
  # xml request as string
  fullXMLRequest <- paste(toString(xmlHeader),"\n", gsub(" ", "", toString(xmlRequest, sep=""), fixed = TRUE))
  # http post request
  r = dynCurlReader()
  curlPerform(postfields = fullXMLRequest, url = applServerURL, verbose = TRUE, post = 1L, writefunction = r$update)
  r$value()
  # parse results - !!caution: currently no error checking!!
  tmp <- xmlTreeParse(r$value())
  predictionString <- xmlValue(tmp[[1]][[1]][[4]])
  # extract predictions line by line
  predictionLines <- strsplit(predictionString, split ="|", fixed = TRUE)[[1]][-1]
  predictions <- transformTargetAttribute(sapply(predictionLines, function(s){gsub('\"','',
                                                                                   tail(strsplit(s, ',', fixed = TRUE)[[1]], n=1))}))
  names(predictions)=NULL
  return(predictions)
}
# prediction
prediction_MLR=predictPMMLModel(dataset = new1,transformTargetAttribute = factor, modelURL = paste("file://", export_xml, sep = ""),
                                
                                applServerURL = "http://10.0.2.2:8080/OpenScoring/Scoring")

#--------------------------------------------FUTURE FORECAST--------------------------#
# Creating Dates for future forecast
No_ahead=50
start_date=as.Date(levels(droplevels(data[nrow(data),1])),"%d-%b-%y")
monthweeks=function(x) { UseMethod("monthweeks");}
monthweeks.Date=function(x) { ceiling(as.numeric(format(x,"%d"))/7);}
monthweeks.POSIXlt=function(x) {ceiling(as.numeric(format(x,"%d"))/7);}
monthweeks.character=function(x) {ceiling(as.numeric(format(as.Date(x),"%d"))/7);}
FC_Dates= cbind.data.frame(seq(as.Date(start_date+1),as.Date(start_date+No_ahead),by=1));colnames(FC_Dates)="Dates";
FC_Days=cbind.data.frame(as.factor(weekdays(as.Date(FC_Dates$Dates,"%Y-%m-%d"))));colnames(FC_Days)="Day"
FC_WOM=cbind.data.frame(as.factor(monthweeks(as.Date(FC_Dates$Dates,"%Y-%m-%d"))));colnames(FC_WOM)="Wom"
trend3=1:length(data$Offered)
future_trend=((length(trend3)+1):(length(trend3)+No_ahead))
future_data=cbind.data.frame(trend3=future_trend,Day=FC_Days,WOM=FC_WOM)
future_Days=as.factor(future_data$Days)
future_WOM=as.factor(future_data$WOM)

future_model=lm((data$Offered)~trend3+Day+Wom,data=data) 
Forecast=predict(future_model,future_data)
future_fC=cbind.data.frame(FC_Dates,future_data[,c(2:length(future_data))],Forecast)








